"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { connectWallet, getConnectedAccount, isWalletConnected } from "@/lib/hashconnect";
import { migrateLegacy, upsertLink, getAllLinks, ensureUniqueId, type PaymentLink } from "@/lib/storage";

export default function SavePage() {
  const [to, setTo] = useState("");
  const [prompt, setPrompt] = useState("");

  // Generated by LLM
  const [genTitle, setGenTitle] = useState<string>("");
  const [genAmount, setGenAmount] = useState<number | null>(null);
  const [genMemo, setGenMemo] = useState<string>("");
  const [genDescription, setGenDescription] = useState<string>("");
  const [genComponentHtml, setGenComponentHtml] = useState<string>("");

  const [loadingGen, setLoadingGen] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [savedId, setSavedId] = useState<string | null>(null);
  const [connectedAccount, setConnectedAccount] = useState<string | null>(null);
  const [links, setLinks] = useState<PaymentLink[]>([]);

  useEffect(() => {
    setConnectedAccount(getConnectedAccount());
    // migrate any legacy single entry into links on first load
    const list = migrateLegacy();
    setLinks(list);
  }, []);

  const onConnect = async () => {
    const info = await connectWallet();
    setConnectedAccount(info?.accountId ?? getConnectedAccount());
  };

  const onGenerate = async () => {
    setError(null);
    setSavedId(null);
    setLoadingGen(true);
    setGenTitle("");
    setGenAmount(null);
    setGenMemo("");
    setGenDescription("");
    setGenComponentHtml("");

    if (!to.trim()) {
      setError("Recipient account ID is required (e.g. 0.0.x)");
      setLoadingGen(false);
      return;
    }
    if (!prompt.trim()) {
      setError("Please describe what the payment link is for");
      setLoadingGen(false);
      return;
    }

    try {
      const res = await fetch("/api/generate-link", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ recipient: to.trim(), prompt: prompt.trim() }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to generate link");

      setGenTitle(data.title || "Payment");
      setGenAmount(Number(data.amount));
      setGenMemo(data.memo || "");
      setGenDescription(data.description || "");
      setGenComponentHtml(data.componentHtml || "");
    } catch (e: any) {
      setError(e?.message || "Generation failed");
    } finally {
      setLoadingGen(false);
    }
  };

  const sanitizeHtml = (html: string) =>
    html
      // strip script tags
      .replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, "")
      // strip inline event handlers like onClick="..."
      .replace(/ on[a-z]+="[^"]*"/gi, "")
      .replace(/ on[a-z]+='[^']*'/gi, "");

  const onSave = (e: React.FormEvent) => {
    e.preventDefault();
    setSavedId(null);
    setError(null);

    if (!to.trim()) {
      setError("Recipient account ID is required");
      return;
    }
    if (!genAmount || !Number.isFinite(genAmount) || genAmount <= 0) {
      setError("Generated amount is invalid");
      return;
    }
    if (!genTitle.trim()) {
      setError("Generated title missing");
      return;
    }

    const id = ensureUniqueId(genTitle);
    const link: PaymentLink = {
      id,
      title: genTitle.trim(),
      to: to.trim(),
      amount: Number(genAmount),
      memo: genMemo ? genMemo : undefined,
      description: genDescription ? genDescription : undefined,
      componentCode: genComponentHtml ? sanitizeHtml(genComponentHtml) : undefined,
      createdAt: Date.now(),
    };

    try {
      upsertLink(link);
      setLinks(getAllLinks());
      setSavedId(id);
    } catch (e) {
      setError("Failed to save link to localStorage");
    }
  };

  return (
    <main className="flex min-h-screen flex-col items-center gap-6 p-8">
      <div className="w-full max-w-2xl flex items-center justify-between">
        <h1 className="text-xl font-semibold">Create Payment Link with AI</h1>
        {!isWalletConnected() ? (
          <button onClick={onConnect} className="px-3 py-2 rounded bg-blue-600 text-white">Connect Wallet</button>
        ) : (
          <div className="text-xs">Connected: {connectedAccount}</div>
        )}
      </div>

      <form onSubmit={onSave} className="w-full max-w-2xl border rounded-xl p-6 space-y-4">
        <div>
          <label className="block text-sm mb-1">Recipient Account ID</label>
          <input
            value={to}
            onChange={(e) => setTo(e.target.value)}
            placeholder="0.0.xxxxx"
            className="w-full border rounded px-3 py-2 bg-transparent"
          />
        </div>

        <div>
          <label className="block text-sm mb-1">Describe your payment link</label>
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g. Make a payment link for a donation for disabled children for donation of 20 HBAR"
            className="w-full border rounded px-3 py-2 bg-transparent min-h-[100px]"
          />
          <button type="button" onClick={onGenerate} disabled={loadingGen} className="mt-2 px-3 py-2 rounded bg-indigo-600 text-white disabled:opacity-60">
            {loadingGen ? "Generating..." : "Generate with AI"}
          </button>
        </div>

        {(genTitle || genAmount || genDescription || genComponentHtml) && (
          <div className="border rounded-lg p-4 space-y-3">
            <div className="text-sm text-gray-500">Generated Preview</div>
            {genComponentHtml ? (
              <div className="rounded border overflow-hidden" dangerouslySetInnerHTML={{ __html: sanitizeHtml(genComponentHtml) }} />
            ) : (
              <div className="p-4 rounded border">
                <div className="font-medium">{genTitle || "Payment"}</div>
                <div className="text-sm text-gray-600">{genAmount ? `${genAmount} HBAR` : "Amount TBD"} → {to || "recipient"}</div>
                {genDescription ? <div className="text-xs text-gray-500 mt-1">{genDescription}</div> : null}
                {genMemo ? <div className="text-xs text-gray-500 mt-1">Memo: {genMemo}</div> : null}
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-xs mb-1">Title</label>
                <input className="w-full border rounded px-3 py-2 bg-transparent" value={genTitle} onChange={(e) => setGenTitle(e.target.value)} />
              </div>
              <div>
                <label className="block text-xs mb-1">Amount (HBAR)</label>
                <input type="number" min="0" step="0.000001" className="w-full border rounded px-3 py-2 bg-transparent" value={genAmount ?? ""} onChange={(e) => setGenAmount(e.target.value ? Number(e.target.value) : null)} />
              </div>
              <div>
                <label className="block text-xs mb-1">Memo</label>
                <input className="w-full border rounded px-3 py-2 bg-transparent" value={genMemo} onChange={(e) => setGenMemo(e.target.value)} />
              </div>
              <div>
                <label className="block text-xs mb-1">Description</label>
                <input className="w-full border rounded px-3 py-2 bg-transparent" value={genDescription} onChange={(e) => setGenDescription(e.target.value)} />
              </div>
            </div>
          </div>
        )}

        {error && <div className="text-sm text-red-600">{error}</div>}

        <button type="submit" className="px-4 py-2 rounded bg-green-600 text-white">Save Link</button>
        {savedId && (
          <span className="ml-2 text-green-700 text-sm">
            Saved! <Link href={`/pay/${savedId}`} className="underline text-green-700">Open link</Link>
          </span>
        )}
      </form>

      <div className="w-full max-w-2xl">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-lg font-medium">Your Payment Links</h2>
          <Link href="/pay" className="text-blue-600 underline text-sm">Go to Pay list</Link>
        </div>
        {links.length === 0 ? (
          <div className="text-sm text-gray-600 border rounded-xl p-4">No links yet. Create one above.</div>
        ) : (
          <div className="grid grid-cols-1 gap-3">
            {links
              .sort((a, b) => b.createdAt - a.createdAt)
              .map((l) => (
                <div key={l.id} className="border rounded-xl p-4 flex items-center justify-between">
                  <div className="text-sm">
                    <div className="font-medium">{l.title} <span className="text-gray-500">/pay/{l.id}</span></div>
                    <div className="text-gray-600">{l.amount} HBAR → {l.to}{l.memo ? ` • ${l.memo}` : ""}</div>
                  </div>
                  <Link href={`/pay/${l.id}`} className="px-3 py-2 rounded bg-zinc-900 text-white dark:bg-white dark:text-zinc-900 text-sm">Open</Link>
                </div>
              ))}
          </div>
        )}
      </div>
    </main>
  );
}